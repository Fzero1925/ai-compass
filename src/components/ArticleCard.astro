---
import { articleCategories, type Article } from '../data/articles';

export interface Props extends Article {}

const { slug, title, description, category, publishDate, author, tags, readTime, featured, image } = Astro.props;

const categoryInfo = articleCategories[category];
const formattedDate = new Date(publishDate).toLocaleDateString('zh-CN', {
  year: 'numeric',
  month: 'long', 
  day: 'numeric'
});
---

<article class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 group">
  <a href={`/articles/${slug}/`} class="block">
    {image && (
      <div class="aspect-video bg-gray-100 overflow-hidden">
        <img 
          src={image} 
          alt={title}
          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
          loading="lazy"
        />
      </div>
    )}
    
    <div class="p-6">
      <!-- Category Badge -->
      <div class="flex items-center gap-2 mb-3">
        <span class={`inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium bg-gradient-to-r ${categoryInfo.color} text-white`}>
          <span>{categoryInfo.icon}</span>
          {categoryInfo.name}
        </span>
        {featured && (
          <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
            推荐
          </span>
        )}
      </div>
      
      <!-- Title -->
      <h3 class="text-xl font-semibold text-gray-900 mb-3 group-hover:text-primary-600 transition-colors line-clamp-2">
        {title}
      </h3>
      
      <!-- Description -->
      <p class="text-gray-600 text-sm mb-4 line-clamp-3">
        {description}
      </p>
      
      <!-- Meta Info -->
      <div class="flex items-center justify-between text-xs text-gray-500 mb-4">
        <div class="flex items-center gap-4">
          <span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            {formattedDate}
          </span>
          <span class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {readTime}分钟阅读
          </span>
        </div>
        <span class="text-gray-400">by {author}</span>
      </div>
      
      <!-- Tags -->
      {tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {tags.slice(0, 3).map(tag => (
            <span class="inline-block px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded">
              #{tag}
            </span>
          ))}
          {tags.length > 3 && (
            <span class="inline-block px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded">
              +{tags.length - 3}
            </span>
          )}
        </div>
      )}
    </div>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>